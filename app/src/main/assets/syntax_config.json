{
  "version": "1.0",
  "theme": {
    "keywords": "#569CD6",
    "strings": "#CE9178",
    "comments": "#6A9955",
    "numbers": "#B5CEA8",
    "operators": "#D4D4D4",
    "functions": "#DCDCAA",
    "types": "#4EC9B0",
    "default": "#D4D4D4"
  },
  "languages": [
    {
      "name": "Kotlin",
      "fileExtensions": [".kt", ".kts"],
      "keywords": [
        "abstract", "actual", "annotation", "as", "break", "by", "catch", "class",
        "companion", "const", "constructor", "continue", "crossinline", "data",
        "delegate", "do", "dynamic", "else", "enum", "expect", "external", "false",
        "final", "finally", "for", "fun", "get", "if", "import", "in", "infix",
        "init", "inline", "inner", "interface", "internal", "is", "lateinit",
        "null", "object", "open", "operator", "out", "override", "package",
        "private", "protected", "public", "reified", "return", "sealed", "set",
        "super", "suspend", "tailrec", "this", "throw", "true", "try", "typealias",
        "typeof", "val", "var", "vararg", "when", "where", "while"
      ],
      "commentStart": "/*",
      "commentEnd": "*/",
      "lineComment": "//",
      "stringDelimiters": ["\"", "'"],
      "numberPattern": "\\b\\d+(\\.\\d+)?[fFlL]?\\b",
      "operatorPattern": "[+\\-*/%=<>!&|^~?:]",
      "functionPattern": "\\b\\w+(?=\\s*\\()",
      "typePattern": "\\b[A-Z]\\w*\\b"
    },
    {
      "name": "Java",
      "fileExtensions": [".java"],
      "keywords": [
        "abstract", "assert", "boolean", "break", "byte", "case", "catch", "char",
        "class", "const", "continue", "default", "do", "double", "else", "enum",
        "extends", "final", "finally", "float", "for", "goto", "if", "implements",
        "import", "instanceof", "int", "interface", "long", "native", "new", "null",
        "package", "private", "protected", "public", "return", "short", "static",
        "strictfp", "super", "switch", "synchronized", "this", "throw", "throws",
        "transient", "try", "void", "volatile", "while", "true", "false"
      ],
      "commentStart": "/*",
      "commentEnd": "*/",
      "lineComment": "//",
      "stringDelimiters": ["\""],
      "numberPattern": "\\b\\d+(\\.\\d+)?[fFlLdD]?\\b",
      "operatorPattern": "[+\\-*/%=<>!&|^~?:]",
      "functionPattern": "\\b\\w+(?=\\s*\\()",
      "typePattern": "\\b[A-Z]\\w*\\b"
    },
    {
      "name": "Python",
      "fileExtensions": [".py", ".pyw"],
      "keywords": [
        "False", "None", "True", "and", "as", "assert", "async", "await", "break",
        "class", "continue", "def", "del", "elif", "else", "except", "finally",
        "for", "from", "global", "if", "import", "in", "is", "lambda", "nonlocal",
        "not", "or", "pass", "raise", "return", "try", "while", "with", "yield"
      ],
      "commentStart": "\"\"\"",
      "commentEnd": "\"\"\"",
      "lineComment": "#",
      "stringDelimiters": ["\"", "'", "\"\"\"", "'''"],
      "numberPattern": "\\b\\d+(\\.\\d+)?[jJ]?\\b",
      "operatorPattern": "[+\\-*/%=<>!&|^~@]",
      "functionPattern": "\\bdef\\s+(\\w+)",
      "typePattern": "\\bclass\\s+(\\w+)"
    },
    {
      "name": "JavaScript",
      "fileExtensions": [".js", ".jsx", ".mjs"],
      "keywords": [
        "abstract", "await", "boolean", "break", "byte", "case", "catch", "char",
        "class", "const", "continue", "debugger", "default", "delete", "do",
        "double", "else", "enum", "export", "extends", "false", "final", "finally",
        "float", "for", "function", "goto", "if", "implements", "import", "in",
        "instanceof", "int", "interface", "let", "long", "native", "new", "null",
        "package", "private", "protected", "public", "return", "short", "static",
        "super", "switch", "synchronized", "this", "throw", "throws", "transient",
        "true", "try", "typeof", "var", "void", "volatile", "while", "with", "yield"
      ],
      "commentStart": "/*",
      "commentEnd": "*/",
      "lineComment": "//",
      "stringDelimiters": ["\"", "'", "`"],
      "numberPattern": "\\b\\d+(\\.\\d+)?\\b",
      "operatorPattern": "[+\\-*/%=<>!&|^~?:]",
      "functionPattern": "\\bfunction\\s+(\\w+)|\\b(\\w+)\\s*(?=\\s*[=:]\\s*function)|\\b(\\w+)\\s*(?=\\s*=>)",
      "typePattern": "\\b[A-Z]\\w*\\b"
    }
  ]
}